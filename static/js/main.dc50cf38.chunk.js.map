{"version":3,"sources":["components/constant/constant.js","components/main/form.js","components/main/curveWeather.js","components/main/weather.js","components/main/main.js","App.js","reportWebVitals.js","index.js"],"names":["apiKeys","dateFormat","optionsEn","optionsUa","optionsRu","Form","option","nameButton","namePlace","getWeather","changeSelect","select","input","handleChange","className","onSubmit","options","type","name","placeholder","value","onChange","id","defaultValue","CurveWeather","time","width","height","mainTemp","units","getX","d3","domain","map","item","range","getY","areaPath","x","d","bandwidth","y0","Math","abs","y1","curve","ref","xAxis","call","transform","x1","x2","y2","offset","stopColor","fill","opacity","index","y","textAnchor","round","Weather","data","date","removeCards","useState","setUnits","sys","country","src","weather","icon","alt","main","temp","onClick","href","feels_like","wind","speed","humidity","pressure","Main","lang","JSON","parse","localStorage","getItem","dataCars","error","setError","cards","setCards","setSelect","setInput","cityName","setCityName","Date","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result","setItem","stringify","e","a","preventDefault","axios","get","responseList","filterArr","list","filter","number","moment","isSame","dt_txt","listArr","format","floor","unshift","push","response","newItem","random","toString","card","graph","target","event","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc50cf38.chunk.js","sourcesContent":["export const apiKeys = '21cb2627c4a730e2b49bd1b03345178a';\r\n\r\nexport const dateFormat = {\r\n  DATE: 'DD MMMM YY',\r\n  DATE_TIME: 'ddd, DD MMMM, HH:mm',\r\n  TIME: 'HH:mm',\r\n};\r\n\r\nexport const optionsEn = [\"Dnipro\", \"Kyiv\", \"London\", \"Cherkasy\", \"Hobart\", \"Kazan\", \"Moscow\", \"Cairo\", \"Reykjavík\"];\r\nexport const optionsUa = [\"Дніпро\", \"Київ\", \"Лондон\", \"Черкаси\", \"Хобарт\", \"Казань\", \"Москва\"];\r\nexport const optionsRu = [\"Днепр\", \"Киев\", \"Лондон\", \"Черкассы\", \"Хобарт\", \"Казань\", \"Москва\", \"Бугрино\", \"Мехамн\"];\r\n","import { Hint } from 'react-autocomplete-hint';\r\nimport PropTypes from 'prop-types';\r\nimport { optionsEn, optionsUa, optionsRu } from '../constant/constant';\r\n\r\nimport './Styles.css'\r\n\r\nconst Form = ({ getWeather, changeSelect, select, input, handleChange }) => {\r\n\r\n    let option, nameButton, namePlace\r\n\r\n    switch (select) {\r\n        case \"en\":\r\n            option = optionsEn;\r\n            nameButton = \"Add\";\r\n            namePlace = \"City name...\";\r\n            break;\r\n        case \"ua\":\r\n            option = optionsUa;\r\n            nameButton = \"Додати\";\r\n            namePlace = \"Назва міста ...\"\r\n            break;\r\n        case \"ru\":\r\n            option = optionsRu;\r\n            nameButton = \"Добавить\";\r\n            namePlace = \"Название города...\"\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-form\">\r\n            <form onSubmit={getWeather}>\r\n                <Hint options={option}>\r\n                    <input\r\n                        type='text'\r\n                        name='city'\r\n                        placeholder={namePlace}\r\n                        value={input}\r\n                        onChange={handleChange}\r\n                    />\r\n                </Hint>\r\n                <button className=\"form-button\">{nameButton}</button>\r\n            </form>\r\n            <select\r\n                id=\"listLang\"\r\n                className=\"lang-block\"\r\n                defaultValue={select}\r\n                onChange={changeSelect}\r\n            >\r\n                <option value=\"en\"> en </option>\r\n                <option value=\"ua\"> ua </option>\r\n                <option value=\"ru\"> ru </option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    select: PropTypes.string.isRequired,\r\n    input: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func,\r\n    changeSelect: PropTypes.func,\r\n    getWeather: PropTypes.func\r\n}\r\n\r\nexport default Form;\r\n","import * as d3 from \"d3\";\r\n\r\nexport const CurveWeather = ({ time, width, height, mainTemp, units}) => {\r\n\r\n  const getX = d3.scaleBand()\r\n    .domain(time.map(item => item.name))\r\n    .range([0, width]);\r\n\r\n  const getY = d3.scaleLinear()\r\n    .domain([0, 40])\r\n    .range([height, 0]);\r\n\r\n  const getXAxis = ref => {\r\n    const xAxis = d3.axisBottom(getX)\r\n    d3.select(ref).call(xAxis);\r\n  };\r\n  \r\n  const areaPath = d3.area()\r\n    .x(d => getX(d.name) + getX.bandwidth() / 4)\r\n    .y0(d => getY(Math.abs(d.value)))\r\n    .y1(() => getY(0))\r\n    .curve(d3.curveMonotoneX)(time)\r\n\r\n  return (\r\n    <div className=\"scale-block\">\r\n      <svg\r\n        className=\"svg\"\r\n        width={width}\r\n        height={height}\r\n      >\r\n        <g\r\n          className=\"axis xAxis\"\r\n          ref={getXAxis}\r\n          transform={`translate(0, 45)`}\r\n        />\r\n        <linearGradient id=\"linear-gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop offset=\"0%\" stopColor={mainTemp > 0 ? \"#FF715B\" : \"#5B8CFF\"} />\r\n          <stop offset=\"100%\" stopColor=\"#FFF4F4\" />\r\n        </linearGradient>\r\n        <path\r\n          fill=\"url(#linear-gradient)\"\r\n          d={areaPath}\r\n          opacity={0.3}\r\n        />\r\n        <g >\r\n        {time.map((item, index) => {\r\n          return (\r\n            <g className=\"temp-points\" key={index}>\r\n              <text\r\n                fill=\"#C5C5C5\"\r\n                x={getX(item.name) + getX.bandwidth() / 2}\r\n                y={getY(Math.abs(item.value)) - 5}\r\n                textAnchor=\"middle\"\r\n              >\r\n                {units === 'metric' ? Math.round(item.value) : Math.round(item.value * 1.8 + 32)}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { CurveWeather } from './curveWeather';\r\nimport PropTypes from 'prop-types';\r\nimport './Styles.css';\r\n\r\nconst Weather = ({ id, data, date, time, removeCards }) => {\r\n    const [units, setUnits] = useState('metric')\r\n\r\n    const handleMetric = () => {\r\n        setUnits('metric')\r\n    }\r\n    const handleImperial = () => {\r\n        setUnits('imperial')\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-wrap\" key={id}>\r\n            <div className=\"form-header\">\r\n                <div className=\"name-block\">\r\n                    <div className=\"name\">{data.name}, {data.sys.country}</div>\r\n                    <div className=\"date\">{date}</div>\r\n                </div>\r\n                <div className=\"img-block\">\r\n                    <img className=\"img-fluid\" src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"\" />\r\n                    <span className=\"description\">{data.weather[0].main}</span>\r\n                </div>\r\n            </div>\r\n            <CurveWeather width={300} height={50} time={time} units={units} mainTemp={data.main.temp}/>\r\n            <div className=\"form-bottom\">\r\n                <div className=\"temp-block\">\r\n                    <div className=\"temp-item\">\r\n                        <div className=\"temp-element\">{data.main.temp > 0 ? '+' : null}{units === 'metric' ? Math.round(data.main.temp) : Math.round(data.main.temp * 1.8 + 32)}</div>\r\n                        <div className=\"units-items\">\r\n                            <button onClick={handleMetric} className={units === 'metric' ? \"metric active\" : \"metric\"}>&#8451;</button>\r\n                            <span className=\"strip\"> | </span>\r\n                            <button href=\"\" onClick={handleImperial} className={units === 'imperial' ? \"imperial active\" : \"imperial\"}>&#8457;</button>\r\n                        </div>\r\n                        <div className=\"feels\">Feels like: {data.main.feels_like > 0 ? '+' : null} {units === 'metric' ? `${Math.round(data.main.feels_like)} °C` : `${Math.round(data.main.feels_like * 1.8 + 32)} °F`}  </div>\r\n                    </div>\r\n                    <div className=\"wind-block\">\r\n                        <div>Wind: <span>{Math.round(data.wind.speed)} m/s</span></div>\r\n                        <div>Humidity: <span>{data.main.humidity}%</span></div>\r\n                        <div>Pressure: <span>{data.main.pressure}Pa</span></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"del\" onClick={() => removeCards(id)}>&#10006;</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nWeather.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    data: PropTypes.object, \r\n    date: PropTypes.string.isRequired,\r\n    removeCards: PropTypes.func\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from './form';\r\nimport Weather from './weather';\r\nimport { apiKeys, dateFormat } from '../constant/constant';\r\nimport moment from 'moment';\r\n\r\nimport './Styles.css';\r\n\r\nexport const Main = () => {\r\n    const lang = !JSON.parse(localStorage.getItem('lang')) ? \"en\" : JSON.parse(localStorage.getItem('lang'));\r\n    const dataCars = !JSON.parse(localStorage.getItem('data')) ? '' : JSON.parse(localStorage.getItem('data'))\r\n    const [error, setError] = useState()\r\n    const [cards, setCards] = useState(dataCars)\r\n    const [select, setSelect] = useState(lang);\r\n    const [input, setInput] = useState('')\r\n    const [cityName, setCityName] = useState('')\r\n    const date = new Date()\r\n\r\n    const handleChange = (event) => {\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    const Location = () => {\r\n        function success(position) {\r\n            const { latitude, longitude } = position.coords\r\n            fetch(`http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${apiKeys}`)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        setInput(result[0].name)\r\n                    },\r\n                    (error) => {\r\n                        setError(error);\r\n                    }\r\n                )\r\n        }\r\n        navigator.geolocation.getCurrentPosition(success, error)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!cards) {\r\n            Location();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('data', JSON.stringify(cards))\r\n        localStorage.setItem('lang', JSON.stringify(select))\r\n    }, [cards, select])\r\n\r\n    const getWeather = async (e) => {\r\n        e.preventDefault();\r\n        setCityName(input)\r\n        setInput('')\r\n        try {\r\n            const responseList = await axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${input}&appid=${apiKeys}&units=metric`);\r\n            var filterArr = responseList.data.list.filter(function (number) {\r\n                return moment(date).isSame(number.dt_txt, 'day')\r\n            });\r\n            var listArr = filterArr.map(function (item) {\r\n                return { name: moment(item.dt_txt).format(dateFormat.TIME), value: Math.floor(item.main.temp) }\r\n            });\r\n            listArr.unshift({name: ' ', value: 1});\r\n            listArr.push({name: '', value: 1});\r\n            const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${input}&units=metric&appid=${apiKeys}&lang=${select}`);\r\n            const newItem = {\r\n                id: Math.random().toString(15),\r\n                card: response.data,\r\n                date: moment(date).format(dateFormat.DATE_TIME),\r\n                graph: listArr,\r\n            } \r\n            setCards([...cards, newItem])\r\n        } catch (error) {\r\n            setInput('Wrong data');\r\n        }\r\n    }\r\n\r\n    const removeCards = (id) => {\r\n        setCards([...cards.filter((item) => item.id !== id)])\r\n    }\r\n\r\n    const changeSelect = (e) => {\r\n        setSelect(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className=\"header\"></header>\r\n            <div className=\"main-wrap\">\r\n                <Form\r\n                    getWeather={getWeather}\r\n                    changeSelect={changeSelect}\r\n                    handleChange={handleChange}\r\n                    input={input}\r\n                    select={select}\r\n                />\r\n                {cards &&\r\n                    <div className=\"form-block\">\r\n                        {cards.map((item, key) => {\r\n                            return (\r\n                                <Weather\r\n                                    data={item.card}\r\n                                    id={item.id}\r\n                                    date={item.date}\r\n                                    removeCards={removeCards}\r\n                                    input={cityName}\r\n                                    time={item.graph}\r\n                                    key={key}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { Main } from './components/main/main';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}