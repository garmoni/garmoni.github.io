{"version":3,"sources":["components/constant/constant.js","components/main/form.js","components/main/curveWeather.js","components/main/weather.js","components/main/language.js","components/main/main.js","App.js","reportWebVitals.js","index.js"],"names":["apiKeys","dateFormat","optionsEn","optionsUa","optionsRu","textEn","textUa","textRu","Form","option","nameButton","namePlace","getWeather","changeSelect","select","input","handleChange","className","onSubmit","options","type","name","placeholder","value","onChange","id","defaultValue","CurveWeather","time","width","height","colorStopStart","units","getX","d3","domain","map","item","range","getY","areaPath","x","d","bandwidth","y0","Math","abs","y1","curve","ref","xAxis","call","transform","x1","x2","y2","offset","stopColor","fill","opacity","index","y","textAnchor","round","Weather","data","date","Feels_like","Wind","Humidity","Pressure","Pa","m_s","removeCards","useState","setUnits","style","backgroundColor","main","temp","sys","country","src","weather","icon","alt","onClick","href","feels_like","wind","speed","humidity","pressure","SwitchLanguage","Main","lang","JSON","parse","localStorage","getItem","dataCars","cards","setCards","setSelect","setInput","cityName","setCityName","Date","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result","error","setItem","stringify","e","a","preventDefault","language","axios","get","responseList","filterArr","list","filter","number","moment","isSame","dt_txt","listArr","format","floor","unshift","push","response","newItem","random","toString","card","color","graph","target","event","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaa167e1.chunk.js","sourcesContent":["export const apiKeys = '21cb2627c4a730e2b49bd1b03345178a';\r\n\r\nexport const dateFormat = {\r\n  DATE: 'DD MMMM YY',\r\n  DATE_TIME: 'ddd, DD MMMM, HH:mm',\r\n  TIME: 'HH:mm',\r\n};\r\n\r\nexport const optionsEn = [\"Dnipro\", \"Kyiv\", \"London\", \"Cherkasy\", \"Hobart\", \"Kazan\", \"Moscow\", \"Cairo\", \"Reykjavík\"];\r\nexport const optionsUa = [\"Дніпро\", \"Київ\", \"Лондон\", \"Черкаси\", \"Хобарт\", \"Казань\", \"Москва\"];\r\nexport const optionsRu = [\"Днепр\", \"Киев\", \"Лондон\", \"Черкассы\", \"Хобарт\", \"Казань\", \"Москва\", \"Бугрино\", \"Мехамн\", \"Верхоянск\"];\r\n\r\nexport const textEn = {\r\n  FEELS_LIKE: 'Feels like',\r\n  WIND: 'Wind',\r\n  HUMIDITY: 'Humidity',\r\n  PRESSURE: 'Pressure',\r\n  M_S: 'm/s',\r\n  PA: 'Pa',\r\n}\r\nexport const textUa = {\r\n  FEELS_LIKE: 'Відчувається, як',\r\n  WIND: 'Вітер',\r\n  HUMIDITY: 'Вологість',\r\n  PRESSURE: 'Тиск',\r\n  M_S: 'м/с',\r\n  PA: 'Па',\r\n};\r\nexport const textRu = {\r\n  FEELS_LIKE: 'По ощущениям',\r\n  WIND: 'Ветер',\r\n  HUMIDITY: 'Влажность',\r\n  PRESSURE: 'Давление',\r\n  M_S: 'м/с',\r\n  PA: 'Па',\r\n};;\r\n","import { Hint } from 'react-autocomplete-hint';\r\nimport PropTypes from 'prop-types';\r\nimport { optionsEn, optionsUa, optionsRu } from '../constant/constant';\r\n\r\nimport './Styles.css'\r\n\r\nconst Form = ({ getWeather, changeSelect, select, input, handleChange }) => {\r\n\r\n    let option, nameButton, namePlace\r\n\r\n    switch (select) {\r\n        case \"en\":\r\n            option = optionsEn;\r\n            nameButton = \"Add\";\r\n            namePlace = \"City name...\";\r\n            break;\r\n        case \"ua\":\r\n            option = optionsUa;\r\n            nameButton = \"Додати\";\r\n            namePlace = \"Назва міста ...\"\r\n            break;\r\n        case \"ru\":\r\n            option = optionsRu;\r\n            nameButton = \"Добавить\";\r\n            namePlace = \"Название города...\"\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-form\">\r\n            <form onSubmit={getWeather}>\r\n                <Hint options={option}>\r\n                    <input\r\n                        type='text'\r\n                        name='city'\r\n                        placeholder={namePlace}\r\n                        value={input}\r\n                        onChange={handleChange}\r\n                    />\r\n                </Hint>\r\n                <button className=\"form-button\">{nameButton}</button>\r\n            </form>\r\n            <select\r\n                id=\"listLang\"\r\n                className=\"lang-block\"\r\n                defaultValue={select}\r\n                onChange={changeSelect}\r\n            >\r\n                <option value=\"en\"> en </option>\r\n                <option value=\"ua\"> ua </option>\r\n                <option value=\"ru\"> ru </option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    select: PropTypes.string.isRequired,\r\n    input: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func,\r\n    changeSelect: PropTypes.func,\r\n    getWeather: PropTypes.func\r\n}\r\n\r\nexport default Form;\r\n","import * as d3 from \"d3\";\r\n\r\nexport const CurveWeather = ({ id, time, width, height, colorStopStart, units }) => {\r\n\r\n  const getX = d3.scaleBand()\r\n    .domain(time.map(item => item.name))\r\n    .range([0, width]);\r\n\r\n  const getY = d3.scaleLinear()\r\n    .domain([0, 40])\r\n    .range([height, 0]);\r\n\r\n  const getXAxis = ref => {\r\n    const xAxis = d3.axisBottom(getX)\r\n    d3.select(ref).call(xAxis);\r\n  };\r\n\r\n  const areaPath = d3.area()\r\n    .x(d => getX(d.name) + getX.bandwidth() / 4)\r\n    .y0(d => getY(Math.abs(d.value)))\r\n    .y1(() => getY(0))\r\n    .curve(d3.curveMonotoneX)(time)\r\n\r\n  return (\r\n    <div className=\"scale-block\">\r\n      <svg\r\n        className=\"svg\"\r\n        width={width}\r\n        height={height}\r\n      >\r\n        <g\r\n          className=\"axis xAxis\"\r\n          ref={getXAxis}\r\n          transform={`translate(0, 45)`}\r\n        />\r\n        <linearGradient id={\"linear-gradient-\" + id} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop offset=\"0%\" stopColor={colorStopStart} />\r\n          <stop offset=\"100%\" stopColor=\"#FFF4F4\" />\r\n        </linearGradient>\r\n        <path\r\n          fill={`url(#linear-gradient-${id})`}\r\n          d={areaPath}\r\n          opacity={0.3}\r\n        />\r\n        <g >\r\n          {time.map((item, index) => {\r\n            return (\r\n              <g className=\"temp-points\" key={index}>\r\n                <text\r\n                  fill=\"#C5C5C5\"\r\n                  x={getX(item.name) + getX.bandwidth() / 2}\r\n                  y={getY(Math.abs(item.value)) - 5}\r\n                  textAnchor=\"middle\"\r\n                >\r\n                  {units === 'metric' ? Math.round(item.value) : Math.round(item.value * 1.8 + 32)}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { CurveWeather } from './curveWeather';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Styles.css';\r\n\r\nconst Weather = ({ id, data, date, time, Feels_like, Wind, Humidity, Pressure, Pa, m_s, removeCards, colorStopStart }) => {\r\n    const [units, setUnits] = useState('metric')\r\n\r\n    const handleMetric = () => {\r\n        setUnits('metric')\r\n    }\r\n    const handleImperial = () => {\r\n        setUnits('imperial')\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-wrap\" key={id} style={{backgroundColor: data.main.temp > 0?\"#fff1fe\":\"#f1f2ff\"} }>\r\n            <div className=\"form-header\">\r\n                <div className=\"name-block\">\r\n                    <div className=\"name\">{data.name}, {data.sys.country}</div>\r\n                    <div className=\"date\">{date}</div>\r\n                </div>\r\n                <div className=\"img-block\">\r\n                    <img className=\"img-fluid\" src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"\" />\r\n                    <span className=\"description\">{data.weather[0].main}</span>\r\n                </div>\r\n            </div>\r\n            <CurveWeather width={300} height={50} id = {id} time={time} units={units} colorStopStart={colorStopStart}/>\r\n            <div className=\"form-bottom\">\r\n                <div className=\"temp-block\">\r\n                    <div className=\"temp-item\">\r\n                        <div className=\"temp-element\">{data.main.temp > 0 ? '+' : null}{units === 'metric' ? Math.round(data.main.temp) : Math.round(data.main.temp * 1.8 + 32)}</div>\r\n                        <div className=\"units-items\">\r\n                            <button onClick={handleMetric} className={units === 'metric' ? \"metric active\" : \"metric\"}>&#8451;</button>\r\n                            <span className=\"strip\"> | </span>\r\n                            <button href=\"\" onClick={handleImperial} className={units === 'imperial' ? \"imperial active\" : \"imperial\"}>&#8457;</button>\r\n                        </div>\r\n                        <div className=\"feels\">{Feels_like}: {data.main.feels_like > 0 ? '+' : null} {units === 'metric' ? `${Math.round(data.main.feels_like)} °C` : `${Math.round(data.main.feels_like * 1.8 + 32)} °F`}  </div>\r\n                    </div>\r\n                    <div className=\"wind-block\">\r\n                        <div>{Wind}: <span>{Math.round(data.wind.speed)} {m_s}</span></div>\r\n                        <div>{Humidity}: <span>{data.main.humidity}%</span></div>\r\n                        <div>{Pressure}: <span>{data.main.pressure}{Pa}</span></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"del\" onClick={() => removeCards(id)}>&#10006;</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nWeather.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    data: PropTypes.object, \r\n    date: PropTypes.string.isRequired,\r\n    removeCards: PropTypes.func\r\n}\r\n\r\nexport default Weather;\r\n","\r\nimport { textEn, textUa, textRu } from '../constant/constant';\r\n\r\nexport const SwitchLanguage = (select) => {\r\n    let setLang = [textEn.FEELS_LIKE, textEn.WIND, textEn.HUMIDITY, textEn.PRESSURE, textEn.PA, textEn.M_S];\r\n\r\n    if(select === \"en\") return setLang = [textEn.FEELS_LIKE, textEn.WIND, textEn.HUMIDITY, textEn.PRESSURE, textEn.PA, textEn.M_S]\r\n    if(select === \"ua\") return setLang = [textUa.FEELS_LIKE, textUa.WIND, textUa.HUMIDITY, textUa.PRESSURE, textUa.PA, textUa.M_S]\r\n    if(select === \"ru\") return setLang = [textRu.FEELS_LIKE, textRu.WIND, textRu.HUMIDITY, textRu.PRESSURE, textRu.PA, textRu.M_S]\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Form from './form';\r\nimport Weather from './weather';\r\nimport {SwitchLanguage} from './language';\r\nimport { apiKeys, dateFormat } from '../constant/constant';\r\nimport moment from 'moment';\r\n\r\nimport './Styles.css';\r\n\r\nexport const Main = () => {\r\n    const lang = !JSON.parse(localStorage.getItem('lang')) ? \"en\" : JSON.parse(localStorage.getItem('lang'));\r\n    const dataCars = !JSON.parse(localStorage.getItem('data')) ? '' : JSON.parse(localStorage.getItem('data'))\r\n    const [cards, setCards] = useState(dataCars)\r\n    const [select, setSelect] = useState(lang);\r\n    const [input, setInput] = useState('')\r\n    const [cityName, setCityName] = useState('')\r\n    const date = new Date()\r\n\r\n    const handleChange = (event) => {\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!cards) {\r\n            function success(position) {\r\n                const { latitude, longitude } = position.coords\r\n                fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${apiKeys}`)\r\n                    .then(res => res.json())\r\n                    .then(\r\n                        (result) => {\r\n                            return setInput(result[0].name)\r\n                        },\r\n                        (error) => {\r\n                            return error;\r\n                        }\r\n                    )\r\n            }\r\n            navigator.geolocation.getCurrentPosition(success)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('data', JSON.stringify(cards))\r\n        localStorage.setItem('lang', JSON.stringify(select))\r\n    }, [cards, select])\r\n\r\n    const getWeather = async (e) => {\r\n        e.preventDefault();\r\n        setCityName(input)\r\n        setInput('')\r\n        let language = SwitchLanguage(select)\r\n        try {\r\n            const responseList = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${input}&appid=${apiKeys}&units=metric`);\r\n            var filterArr = responseList.data.list.filter(function (number) {\r\n                return moment(date).isSame(number.dt_txt, 'day')\r\n            });\r\n            var listArr = filterArr.map(function (item) {\r\n                return { name: moment(item.dt_txt).format(dateFormat.TIME), value: Math.floor(item.main.temp) }\r\n            });\r\n            listArr.unshift({name: ' ', value: 1});\r\n            listArr.push({name: '', value: 1});\r\n            const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${input}&units=metric&appid=${apiKeys}&lang=${select}`);\r\n            let colorStopStart = Math.round(response.data.main.temp) < 0 ? \"#5B8CFF\": \"#FF715B\"\r\n\r\n            const newItem = {\r\n                id: Math.random().toString(15),\r\n                card: response.data,\r\n                color: colorStopStart,\r\n                date: moment(date).format(dateFormat.DATE_TIME),\r\n                Feels_like: language[0],\r\n                Wind:  language[1],\r\n                Humidity:  language[2],\r\n                Pressure:  language[3],\r\n                Pa:  language[4],\r\n                m_s:  language[5],\r\n                graph: listArr,\r\n            } \r\n            setCards([...cards, newItem])\r\n        } catch (error) {\r\n            setInput(select === 'en'? \"Wrong data\": select === 'ua'? \"Неправильні дані\": \"Неправильные данные\");\r\n        }\r\n    }\r\n\r\n    const removeCards = (id) => {\r\n        setCards([...cards.filter((item) => item.id !== id)])\r\n    }\r\n\r\n    const changeSelect = (e) => {\r\n        setSelect(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className=\"header\"></header>\r\n            <div className=\"main-wrap\">\r\n                <Form\r\n                    getWeather={getWeather}\r\n                    changeSelect={changeSelect}\r\n                    handleChange={handleChange}\r\n                    input={input}\r\n                    select={select}\r\n                />\r\n                {cards &&\r\n                    <div className=\"form-block\">\r\n                        {cards.map((item, key) => {\r\n                            return (\r\n                                <Weather\r\n                                    data={item.card}\r\n                                    colorStopStart={item.color}\r\n                                    id={item.id}\r\n                                    date={item.date}\r\n                                    removeCards={removeCards}\r\n                                    input={cityName}\r\n                                    time={item.graph}\r\n                                    key={key}\r\n                                    Feels_like={item.Feels_like}\r\n                                    Wind={item.Wind}\r\n                                    Humidity={item.Humidity}\r\n                                    Pressure={item.Pressure}\r\n                                    Pa={item.Pa}\r\n                                    m_s={item.m_s}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { Main } from './components/main/main';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}